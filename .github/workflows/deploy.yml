name: Deploy Application

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Cache uv packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Cache NLTK data
        uses: actions/cache@v4
        with:
          path: ~/nltk_data
          key: ${{ runner.os }}-nltk-punkt_tab
          restore-keys: |
            ${{ runner.os }}-nltk-

      - name: Install dependencies
        run: |
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º uv –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
          uv pip install nltk==3.9.1 --system
          python -c "import nltk; nltk.download('punkt_tab')"
          uv pip install -r requirements-dev.txt --system

      - name: Run tests & qa
        run: |
          pytest
          mypy

      # deploy
      - name: Add SSH Private Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Execute Deployment Commands
        run: |
          ssh -o StrictHostKeyChecking=no -l leybovich-nikita 84.201.131.244 << 'EOF'
          cd kys_in_rest
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ffmpeg –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          if ! command -v ffmpeg &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y ffmpeg
          fi
          
          # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
          git pull
          
          source ./.venv/bin/activate
          pip install -r requirements.txt
          python -c "import nltk; nltk.download('punkt_tab')"
          python -m scripts.migrate
          
          # –ö–æ–ø–∏—Ä—É–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
          
          ## Telegram Bot Service
          if [ -f "./ops/tgbot.service" ]; then
            sudo cp ./ops/tgbot.service /etc/systemd/system/tgbot.service
            sudo chmod 644 /etc/systemd/system/tgbot.service
          fi
          
          ## Flask Service
          if [ -f "./ops/flask.service" ]; then
            sudo cp ./ops/flask.service /etc/systemd/system/flask.service
            sudo chmod 644 /etc/systemd/system/flask.service
          fi
          
          # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
          sudo systemctl daemon-reload
          
          # –£–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å–∞–º–∏
          
          ## Telegram Bot
          if sudo systemctl is-enabled tgbot.service 2>/dev/null; then
            sudo systemctl restart tgbot.service
          else
            sudo systemctl enable --now tgbot.service
          fi
          
          ## Flask Server
          if sudo systemctl is-enabled flask.service 2>/dev/null; then
            sudo systemctl restart flask.service
          else
            sudo systemctl enable --now flask.service
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
          echo "=== Telegram Bot Status ==="
          sudo systemctl status tgbot.service --no-pager
          
          echo "=== Flask Server Status ==="
          sudo systemctl status flask.service --no-pager
          EOF

      - name: Send Failure Notification
        if: failure()
        run: |
          python scripts/send_tg_notification.py failure "üí• –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ GitHub Actions –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É."
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_ADMINS: ${{ secrets.TG_ADMINS }}